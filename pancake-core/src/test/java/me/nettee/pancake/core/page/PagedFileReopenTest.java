package me.nettee.pancake.core.page;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.io.File;
import java.util.Arrays;
import java.util.Deque;
import java.util.HashSet;
import java.util.Set;

import static me.nettee.pancake.core.page.PagedFileTestUtils.*;
import static org.junit.Assert.*;

public class PagedFileReopenTest {

	private static final File file = new File("/tmp/c.db");
	private PagedFile pagedFile;

	@BeforeClass
	public static void setUpBeforeClass() {

	}

	@Before
	public void setUp() {
		if (file.exists()) {
			file.delete();
		}
		pagedFile = PagedFile.create(file);
	}

	@After
	public void tearDown() {
		pagedFile.close();
	}

	public void reopen() {
		pagedFile.close();
		pagedFile = PagedFile.open(file);
	}

	@Rule
	public ExpectedException thrown = ExpectedException.none();

	@Test
	public void testNumberOfPages() {
		int N = allocatePages(pagedFile);
		unpinPages(pagedFile, N);
		reopen();
		assertEquals(N, pagedFile.getNumOfPages());
	}

    /**
     * All the allocated pages can be accessed.
     */
	@Test
	public void testPageNumberRange() {
		int N = allocatePages(pagedFile);
		unpinPages(pagedFile, N);
		reopen();
		for (int pageNum = 0; pageNum < N; pageNum++) {
			// except to be no exception
			pagedFile.getPage(pageNum);
		}
		unpinPages(pagedFile, N);
		thrown.expect(PagedFileException.class);
		pagedFile.getPage(N);
	}

    /**
     * All the allocated pages, except disposed ones, can be accessed.
     */
	@Test
	public void testDisposedPage() {
		int N = allocatePages(pagedFile);
		Deque<Integer> disposedPageNums = PagedFileTestUtils.disposePages(pagedFile, N);
		unpinPages(pagedFile, N, disposedPageNums);
		reopen();
		for (int pageNum = 0; pageNum < N; pageNum++) {
			if (disposedPageNums.contains(pageNum)) {
				try {
					pagedFile.getPage(pageNum);
					fail("expect PagedFileException to throw");
				} catch (PagedFileException e) {
					// expected
				}
			} else {
				pagedFile.getPage(pageNum);
			}
		}
		unpinPages(pagedFile, N, disposedPageNums);
	}

    /**
     * The pageNums of disposed pages will be re-used for the following allocations.
     * // TODO check the LIFO re-use policy
     */
	@Test
	public void testReallocateDisposedPage() {
		int N = allocatePages(pagedFile);
		Deque<Integer> disposedPageNums = PagedFileTestUtils.disposePages(pagedFile, N);
		unpinPages(pagedFile, N, disposedPageNums);
		reopen();
		Set<Integer> pageNumSet = new HashSet<>();
		for (int i = 0; i < disposedPageNums.size(); i++) {
			Page page = pagedFile.allocatePage();
			pageNumSet.add(page.num);
		}
		assertEquals(disposedPageNums.size(), pageNumSet.size());
		for (int pageNum : pageNumSet) {
			assertTrue(disposedPageNums.contains(pageNum));
		}
		unpinPages(pagedFile, disposedPageNums);
	}

	// TODO javadoc
	@Test
	public void testGetPage() {
		String str0 = randomString();
		int N = allocatePages(pagedFile);
		fillPages(pagedFile, str0, N);
		unpinPages(pagedFile, N);
		reopen();
		for (int pageNum = 0; pageNum < N; pageNum++) {
			Page page = pagedFile.getPage(pageNum);
			String str = getStringData(page, str0.length() + String.valueOf(pageNum).length());
			assertEquals(str0, str.substring(0, str0.length()));
			assertEquals(pageNum, (int) Integer.valueOf(str.substring(str0.length())));
		}
		unpinPages(pagedFile, N);
	}

	// TODO javadoc
	@Test
	public void testGetFirstPage() {
		String str0 = randomString();
		int N = allocatePages(pagedFile);
		fillPages(pagedFile, str0, N);
		unpinPages(pagedFile, N);
		reopen();
		Page firstPage = pagedFile.getFirstPage();
		String str = getStringData(firstPage, str0.length() + 1);
		assertEquals(str0, str.substring(0, str0.length()));
		assertEquals(0, (int) Integer.valueOf(str.substring(str0.length())));
		unpinPages(pagedFile, Arrays.asList(firstPage.num));
	}

	// TODO javadoc
	@Test
	public void testGetLastPage() {
		String str0 = randomString();
		int N = allocatePages(pagedFile);
		fillPages(pagedFile, str0, N);
		unpinPages(pagedFile, N);
		reopen();
		Page lastPage = pagedFile.getLastPage();
		String str = getStringData(lastPage, str0.length() + String.valueOf(N - 1).length());
		assertEquals(str0, str.substring(0, str0.length()));
		assertEquals(N - 1, (int) Integer.valueOf(str.substring(str0.length())));
		unpinPages(pagedFile, Arrays.asList(lastPage.num));
	}
	
	// TODO more test like those in PagedFilePageTest
}
